import{_ as s,c as a,a as n,o as e}from"./app-D7GTOmel.js";const l={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h2 id="如果只有一个" tabindex="-1"><a class="header-anchor" href="#如果只有一个"><span>如果只有一个</span></a></h2><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-kotlin"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fun</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    var</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> func: (</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">String</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) -&gt; </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 此处我们传入的内容就叫做 it</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        it.length</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如果有多个" tabindex="-1"><a class="header-anchor" href="#如果有多个"><span>如果有多个</span></a></h2><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-kotlin"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fun</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    var</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> func: (</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">String</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) -&gt; </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> { s, i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        println</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;String: $s, Int: $i&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        s.length </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如果需要提前返回" tabindex="-1"><a class="header-anchor" href="#如果需要提前返回"><span>如果需要提前返回</span></a></h2><p>必须声明一个 <code>代码块</code> 否则无法提前返回</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-kotlin"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fun</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    var</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> func: (</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">String</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) -&gt; </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> xx@{ s, i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">@xx </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">123</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        println</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;String: $s, Int: $i&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        s.length </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const p=s(l,[["render",t]]),d=JSON.parse('{"path":"/notes/kotlin/%E5%AD%A6%E4%B9%A0/lamada%E8%A1%A8%E8%BE%BE%E5%BC%8F/","title":"lamada表达式","lang":"zh-CN","frontmatter":{"title":"lamada表达式","createTime":"2025/07/31 18:19:20","permalink":"/notes/kotlin/学习/lamada表达式/","description":"如果只有一个 如果有多个 如果需要提前返回 必须声明一个 代码块 否则无法提前返回","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lamada表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://blog.huankong.top/notes/kotlin/%E5%AD%A6%E4%B9%A0/lamada%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"幻空博客"}],["meta",{"property":"og:title","content":"lamada表达式"}],["meta",{"property":"og:description","content":"如果只有一个 如果有多个 如果需要提前返回 必须声明一个 代码块 否则无法提前返回"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"readingTime":{"minutes":0.39,"words":117},"git":{},"autoDesc":true,"filePathRelative":"notes/kotlin/1.学习/8.lamada表达式.md","headers":[]}');export{p as comp,d as data};
